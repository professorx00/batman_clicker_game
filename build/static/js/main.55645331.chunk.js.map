{"version":3,"sources":["NavBar/index.js","Grid/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","current","highest","isCorrect","alert","class","id","className","src","Grid","characters","handleOnCickEvent","map","element","data-id","key","tabIndex","img","onClick","event","alt","name","App","state","clicked","checkCharacter","find","imagesArray","currentImage","target","dataset","push","setState","sort","Math","random","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"okCAmBeA,MAhBf,YAAwD,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,UAAUC,EAAS,EAATA,MAC5C,OACE,yBAAKC,MAAM,MAAMC,GAAG,OAClB,yBAAKC,UAAU,sCACb,yBAAKC,IAAI,cAAcD,UAAU,SAAS,wBAAIA,UAAU,WAAd,yBAE5C,yBAAKA,UAAU,8DACb,wBAAIA,UAAWH,GAAQD,IAEzB,yBAAKI,UAAU,sCACb,wBAAIA,UAAU,WAAd,UAAgCN,EAAhC,gBAAsDC,MCM/CO,MAjBf,YAAkD,IAAlCC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,kBAC1B,OACE,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,wBAAwBD,GAAG,aACvCI,EAAWE,KAAI,SAACC,GACf,OACE,yBAAKN,UAAU,gCAAgCO,UAASD,EAAQP,GAAIS,IAAKF,EAAQP,IAC/E,yBAAKU,SAAS,IAAIR,IAAKK,EAAQI,IAAKC,QAAS,SAACC,GAAD,OAASR,EAAkBQ,IAAQZ,UAAU,2BAA2BO,UAASD,EAAQP,GAAIS,IAAKF,EAAQP,GAAIc,IAAKP,EAAQQ,c,OC+DvKC,G,iNAjEbC,MAAQ,CACNC,QAAS,GACTtB,QAAS,EACTD,QAAS,EACTE,UAAW,GACXO,WAAYA,EACZN,MAAO,S,EAMTqB,eAAiB,SAACnB,GAIhB,OAHY,EAAKiB,MAAMC,QAAQE,MAAK,SAASb,GAC3C,OAAOA,IAAYP,KAGZ,+BAEA,qB,EAKXK,kBAAoB,SAACQ,GACnB,IAAIjB,EAAQ,EAAKqB,MAAMrB,QACnBD,EAAU,EAAKsB,MAAMtB,QACrB0B,EAAc,EAAKJ,MAAMC,QACvBI,EAAeT,EAAMU,OAAOC,QAAQxB,GACpCH,EAAY,EAAKsB,eAAeG,GAClCxB,EAAQ,EAAKmB,MAAMnB,MACR,iCAAZD,GACDD,EAASD,EAAQC,EAASD,EAAQC,EAClCD,EAAQ,EACR0B,EAAY,GACZvB,EAAQ,eAIRuB,EAAYI,KAAKH,GAEjB1B,IADAD,EACiBC,EAASD,EAAQC,EAClCE,EAAQ,gBAEV,EAAK4B,SAAS,CACZtB,WAAY,EAAKa,MAAMb,WAAWuB,MAAK,kBAAMC,KAAKC,SAAW,MAC7DhC,UAAWA,EACXqB,QAASG,EACTzB,QAASA,EACTD,QAAQA,EACRG,MAAOA,K,wEAIT,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,CAAQN,QAASmC,KAAKb,MAAMtB,QAASG,MAAOgC,KAAKb,MAAMnB,MAAOF,QAASkC,KAAKb,MAAMrB,QAASC,UAAWiC,KAAKb,MAAMpB,YACjH,yBAAKI,UAAU,aACb,kBAAC,EAAD,CAAMG,WAAY0B,KAAKb,MAAMb,WAAYC,kBAAqByB,KAAKzB,0B,GA3D3D0B,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.55645331.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction NavBar({ current, highest, isCorrect,alert }) {\r\n  return (\r\n    <div class=\"row\" id=\"nav\">\r\n      <div className=\"col-md-4 d-flex align-items-center\">\r\n        <img src=\"favicon.ico\" className=\"icon\" /><h3 className=\"m-3 p-0\"> Batman Clicker Game</h3>\r\n      </div>\r\n      <div className=\"col-md-4 d-flex justify-content-center align-items-center \">\r\n        <h5 className={alert}>{isCorrect}</h5>\r\n      </div>\r\n      <div className=\"col-md-4 d-flex align-items-center\">\r\n        <h3 className=\"m-0 p-0\">Score: {current}| Top Score: {highest}</h3>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\n\r\nfunction Grid({ characters, handleOnCickEvent }) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-10 offset-md-1\" id=\"imageGrid\">\r\n        {characters.map((element)=>{\r\n          return (\r\n            <div className=\"m-1 p-0 imageContainer center\" data-id={element.id} key={element.id}>\r\n              <img tabIndex=\"0\" src={element.img} onClick={(event)=>handleOnCickEvent(event)} className=\"Images btn btn-secondary\" data-id={element.id} key={element.id} alt={element.name} />\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Grid;","import React, { Component } from 'react';\nimport NavBar from \"./NavBar\";\nimport Grid from \"./Grid\"\nimport characters from \"./characters.json\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    clicked: [],\n    highest: 0,\n    current: 0,\n    isCorrect: \"\",\n    characters: characters,\n    alert: \"alert\"\n  };\n\n  \n\n\n  checkCharacter = (id)=>{\n    let found = this.state.clicked.find(function(element) {\n      return element === id;\n    });\n    if(found){\n      return \"Is Incorrect Guess! You Lose\";\n    }else{\n      return \"Is Correct Guess!\"\n    }\n\n  }\n\n  handleOnCickEvent = (event)=>{\n    let highest=this.state.highest;\n    let current = this.state.current;\n    let imagesArray = this.state.clicked;\n    const currentImage = event.target.dataset.id;\n    const isCorrect = this.checkCharacter(currentImage);\n    let alert = this.state.alert;\n    if(isCorrect===\"Is Incorrect Guess! You Lose\"){\n      highest= current>highest? current:highest;\n      current=0;\n      imagesArray=[];\n      alert = \"alertWrong\";\n    }\n    else{\n\n      imagesArray.push(currentImage);\n      current++;\n      highest= current>highest? current:highest;\n      alert = \"alertCorrect\"\n    }\n    this.setState({\n      characters: this.state.characters.sort(() => Math.random() - 0.5),\n      isCorrect: isCorrect,\n      clicked: imagesArray,\n      highest: highest,\n      current:current,\n      alert: alert\n    })\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <NavBar current={this.state.current} alert={this.state.alert} highest={this.state.highest} isCorrect={this.state.isCorrect}/>\n        <div className=\"container\">\n          <Grid characters={this.state.characters} handleOnCickEvent = {this.handleOnCickEvent}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}